apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-server-deployment
  labels:
    app: flask-server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: flask-server
  template:
    metadata:
      labels:
        app: flask-server
    spec:
      containers:
      - name: flask-server-container
        image: gcr.io/eoscience/flask-server:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
      # Add the secret created to the default service account as well: https://blog.container-solutions.com/using-google-container-registry-with-kubernetes
      # If this is not done, then fetching images from GCR will fail!
      imagePullSecrets:
      - name: gcr-key
---
apiVersion: v1
kind: Service
metadata:
  name: flask-server-service
  annotations:
    # Use an internal only service since our GCP project does not allow external IPs.
    # When the service has started, port forward the 8080 port from the local machine to the service by doing:
    # kubectl port-forward service/flask-server-service 8080:8080
    # This will allow us to access the service via 127.0.0.1:8080 on our local machine browser.
    # If we deploy an external load balancer then we won't have to do any of this and can directly access
    # the service with the <EXTERNAL_IP>:8080 of the service.
    kubernetes.io/service-type: InternalLoadBalancer
    cloud.google.com/load-balancer-type: Internal
spec:
  type: LoadBalancer
  # The allowed IP range can be verfied by looking at "VPC network details" on GCP 
  loadBalancerIP: 10.128.0.19
  selector:
    app: flask-server
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
  